<div id="sigma-example"></div>
<div id="controls">
  <button id="filter">filter</button>
  <button id="force-atlas">stop force-atlas</button>
</div>
<div id="container">
  <div id="header">
    <%= image_tag 'header.png'  %>
  </div>
  <div id="content">
    <%= image_tag 'logo.png' %>
    <div id="menu">
      <%= link_to 'HOME', '/home/home', remote: true, id: 'home' %> 
      <%= link_to 'SEARCH', '/home/search', remote: true, id: 'search' %> 
      <%= link_to 'CONTACT', '/home/contact', remote: true, id: 'contact' %>
    </div>
    <div id="main">
      <%= form_tag({action: 'search_results'}, {method: 'get', remote: true}) do %>
      <%= text_field :artist_search, :name %>
      <%= submit_tag "search artist", class: "btn btn-primary" %>
      <% end -%>
      <div id="search_results"></div>
    </div>
  </div>
  <div id="footer">
    <%= image_tag "footer.png" %>
  </div>
</div>
<script>
	$('form').on('ajax:success', function(data, res, status) {
		$('#search_results').html(res);
	});
  <% %w(search home contact).each do |n| -%>
  $('#<%= n %>').on('ajax:success', function(data, res, status) {
		$('#main').html(res);
	});
  <% end -%>
  function init() {
    /*
    // Instanciate sigma.js and customize it :
    var sigInst = sigma.init(document.getElementById('sigma-example')).drawingProperties({
      defaultLabelColor: '#fff'
    });

    // Generate a random graph with :
    //   . N nodes
    //   . E edges
    //   . C clusters
    //   . d the proportion of edges that connect two nodes
    //     from the same cluster
    var i, N = 50, E = 1000, C = 5, d = 0.5, clusters = [];
    for(i = 0; i < C; i++){
      clusters.push({
        'id': i,
        'nodes': [],
        'color': 'rgb('+Math.round(Math.random()*256)+','+
        Math.round(Math.random()*256)+','+
        Math.round(Math.random()*256)+')'
      });
    }

    for(i = 0; i < N; i++){
      var cluster = clusters[(Math.random()*C)|0];
      sigInst.addNode('n'+i,{
        'x': Math.random(),
        'y': Math.random(),
        'size': 0.5+4.5*Math.random(),
        'color': cluster['color'],
        'cluster': cluster['id']
      });
      cluster.nodes.push('n'+i);
    }

    for(i = 0; i < E; i++){
      if(Math.random() < 1-d){
        sigInst.addEdge(i,'n'+(Math.random()*N|0),'n'+(Math.random()*N|0));
        }else{
        var cluster = clusters[(Math.random()*C)|0], n = cluster.nodes.length;
        sigInst.addEdge(i,cluster.nodes[Math.random()*n|0],cluster.nodes[Math.random()*n|0]);
      }
    }
    */
    //artist graph

    // Instanciate sigma.js and customize it :
    sigInst = sigma.init(document.getElementById('sigma-example')).drawingProperties({
      defaultLabelColor: '#999'
    });
    <% i = 0 %>
    <% max = @artists.inject(2){ |max, artist| max = (artist.listenings || 0) < max ? max : (artist.listenings || 0) } -%>
    <% @artists.each do |artist| %>
      sigInst.addNode('<%= artist.id %>',{
        'label': '<%=raw artist.name.gsub("'", " ") + " - " + artist.listenings.to_s %>',
        'x': Math.random(),
        'y': Math.random(),
        <% size = (Math.log((artist.listenings || 0).to_i)/Math.log(max))*20 -%>
        'size': <%= size < 1 ? 1 : size %>,
        'color': 'rgb(100, 50, 20)'
      });
    <% end %>
    <% @artists.each do |artist| %>
      <% artist.children.each do |artist_child| %>
        <% i+=1 %>
        <% if @artists.include?(artist_child) %>
          sigInst.addEdge('<%= i %>', '<%= artist.id %>', '<%= artist_child.id %>')
        <% end %>
      <% end %>
    <% end %>
    sigInst.iterEdges(function(e){ e.hidden = 1 });
    // Start the ForceAtlas2 algorithm
    // (requires "sigma.forceatlas2.js" to be included)
    sigInst.startForceAtlas2();

    var isRunning = true;
    document.getElementById('force-atlas').addEventListener('click',function(){
      if(isRunning){
        isRunning = false;
        sigInst.stopForceAtlas2();
        document.getElementById('force-atlas').innerHTML = 'start force-atlas';
        }else{
        isRunning = true;
        sigInst.startForceAtlas2();
        document.getElementById('force-atlas').innerHTML = 'stop force-atlas';
      }
    },true);

    // Bind events :
    var greyColor = '#666';
    sigInst.bind('overnodes',function(event){
      var nodes = event.content;
      var neighbors = {};
      sigInst.iterEdges(function(e){
        if(nodes.indexOf(e.source)<0 && nodes.indexOf(e.target)<0){
          if(!e.attr['grey']){
            e.attr['true_color'] = e.color;
            e.color = greyColor;
            e.attr['grey'] = 1;
          }
          }else{
          e.color = e.attr['grey'] ? e.attr['true_color'] : e.color;
          e.attr['grey'] = 0;

          neighbors[e.source] = 1;
          neighbors[e.target] = 1;
        }
        }).iterNodes(function(n){
        if(!neighbors[n.id]){
          if(!n.attr['grey']){
            n.attr['true_color'] = n.color;
            n.color = greyColor;
            n.attr['grey'] = 1;
          }
          }else{
          n.color = n.attr['grey'] ? n.attr['true_color'] : n.color;
          n.attr['grey'] = 0;
        }
      }).draw(2,2,2);
      }).bind('outnodes',function(){
      sigInst.iterEdges(function(e){
        e.color = e.attr['grey'] ? e.attr['true_color'] : e.color;
        e.attr['grey'] = 0;
        }).iterNodes(function(n){
        n.color = n.attr['grey'] ? n.attr['true_color'] : n.color;
        n.attr['grey'] = 0;
      }).draw(2,2,2);
    });

   // sigInst.zoom_filter();

    document.getElementById('filter').addEventListener('click', function() {
      if (document.getElementById('filter').innerHTML == 'filter') {
        sigInst.start_filtering();
        document.getElementById('filter').innerHTML = 'unfilter';
        }else{
        sigInst.stop_filtering();
        document.getElementById('filter').innerHTML = 'filter';
      }
    }, true);


    sigInst.draw();
  };
  var sigInst;
  if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', init, false);
    } else {
    window.onload = init;
  }
  $('form').bind('ajax:success', function(e, data, status, xhr) {
    $('#search_results').html(xhr.responseText);
  })
</script>
